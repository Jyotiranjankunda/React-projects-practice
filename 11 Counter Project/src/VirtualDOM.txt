What actually happens if a component function is executed and how this JSX code here ends up on the screen? 

When the page is loaded for the first time, the component function gets executed and this JSX code gets returned and component tree gets built, in the end, you end up with a bunch of native HTML elements. This entire component tree is in the end resolved, and that then this HTML code is inserted in the DOM.

But after that if we do any change in the page, suppose click a button, then all the jsx code is not recreated and reinserted because that would be super inefficient. So just because a component function is executed again, that does not mean that all the JSX code that's produced by that component function is reinserted in the DOM and the old code is not thrown away and replaced by new HTML code. 

React works with virtual DOM for finding out which parts of the actual DOM should be updated. And it's using this virtual DOM because working with such a virtual DOM, which lives only in memory is faster than working with that real DOM here. 

So how does this virtual DOM work then? Well, if I reload the page and the overall React app starts therefore and is rendered for the first time, React creates that component tree and then in the end derives the actual HTML code that should be rendered from that component tree and it then creates a virtual DOM snapshot. So it's not reaching out to the real DOM yet. Instead, it just creates a virtual representation of how that real DOM should look like. As a next step, React then compares that to that last virtual DOM snapshot it created. Now, if the app just started, there is no last snapshot and therefore, React of course, sees that everything changed and it goes ahead to the real DOM and makes those changes, which means in this case, the entire virtual DOM is inserted into the real DOM, into this div with the idea root in this case. 

Now, after that when I click a button, React repeats that process. It again creates that component tree, and of course, it can quickly find out that only a part of that tree changed, that only some of those component functions were executed, and React derives the updated HTML code. And it then compares that code with the old code. Still only virtually, it does not compare anything with the real DOM, it just compares this new virtual DOM snapshot with the old virtual DOM. And then it quickly finds out which parts changed. 

React goes ahead and applies those changes to the real DOM and only those changes. Just because a component function executes and it's JSX code therefore is evaluated, does not mean that this code is inserted or updated in the real DOM, because all those real DOM operations are quite performance intensive and therefore, React does not change the real DOM all the time. Instead, it just creates these snapshots, compares them and only makes the necessary changes to get to the target result.